{"version":3,"sources":["services/persons.js","App.js","serviceWorker.js","index.js"],"names":["baseUrl","axios","get","then","response","data","newObject","post","id","delete","put","Person","person","handleDelete","name","number","onClick","Rows","persons","filterNames","filter","map","key","PersonForm","newName","newNumber","addName","handleNameChange","handleNumberChange","onSubmit","value","onChange","type","FilterInput","handleFilterChange","Notification","message","isError","className","App","useState","setPersons","setNewName","setNewNumber","setFilter","notificationMessage","setNotificationMessage","setIsError","useEffect","personService","initialPersons","nameExist","some","update","nameObject","window","confirm","find","console","log","returnedPerson","handleNotification","catch","error","handleError","setTimeout","event","target","preventDefault","concat","toLowerCase","includes","personId","deleted","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.18fd6a18.chunk.js","sourcesContent":["import axios from 'axios'\nconst baseUrl = '/api/persons'\n\nconst getAll = () => {\n  const request = axios.get(baseUrl)\n   return request.then(response => response.data)\n}\n\nconst create = newObject => {\n  const request = axios.post(baseUrl, newObject)\n   return request.then(response => response.data)\n}\n\nconst deletePerson = (id) => {\n  const request = axios.delete(`${baseUrl}/${id}`)\n  return request.then(response => response.data)\n}\n\nconst update = (id, newObject) => {\n  const request = axios.put(`${baseUrl}/${id}`, newObject)\n  return request.then(response => response.data)\n}\n\n\nexport default { getAll, create, deletePerson, update }","import React, { useState, useEffect } from 'react'\nimport personService from './services/persons'\nimport './App.css'\n\n\nconst Person = ({person, handleDelete}) => {\n  return(\n    <div>\n      <p>{person.name} {person.number} <button onClick={() => handleDelete(person)}>delete</button> </p>\n    </div>\n  )\n}\n\n\nconst Rows = ({persons, filterNames, handleDelete}) => {\n  return(\n    persons.filter(filterNames).map(person =>\n      <Person key= {person.name} person={person} handleDelete={handleDelete}/>)\n  )\n}\n\nconst PersonForm = ({newName, newNumber, addName, handleNameChange, handleNumberChange}) => {\n  return(\n    <form onSubmit={addName}>\n      <div>\n        name: <input value={newName} onChange={handleNameChange}/>\n      </div>\n      <div>\n        number: <input value={newNumber} onChange={handleNumberChange}/></div>\n      <div>\n        <button type=\"submit\">add</button>\n      </div>\n    </form>\n  )\n}\n\nconst FilterInput = ({filter, handleFilterChange}) => {\n  return(\n    <div>\n          filter shown with <input value={filter} onChange={handleFilterChange}/>\n    </div>\n  )\n}\n\n\nconst Notification = ({ message, isError }) => {\n  if (message === null) {\n    return null\n  }\n  else if (isError) {\n    return (\n      <div className=\"error\">\n        {message}\n      </div>\n    )\n  }\n  else {\n    return (\n      <div className=\"success\">\n        {message}\n      </div>\n    )\n  }\n}\n\n\nconst App = () => {\n  const [ persons, setPersons] = useState([])\n  const [ newName, setNewName ] = useState('')\n  const [ newNumber, setNewNumber ] = useState('')\n  const [ filter, setFilter ] = useState('')\n  const [ notificationMessage, setNotificationMessage ] = useState(null)\n  const [ isError, setIsError ] = useState(false)\n\n\n  useEffect(() => {\n    personService\n      .getAll()\n      .then(initialPersons => {\n        setPersons(initialPersons)\n      })\n  }, [])\n\n\n\n  const addName = (event) => {\n     event.preventDefault()\n\n     const nameObject={\n          name: newName,\n          number: newNumber\n         }\n\n     if(nameExist()){\n        update(nameObject)\n      }\n      else{\n         personService\n          .create(nameObject)\n          .then(returnedPerson => {\n            setPersons(persons.concat(returnedPerson))\n            handleNotification(`${newName} added to phonebook`)\n          })\n\n      }\n\n      setNewName('')\n      setNewNumber('')\n  }\n\n  const handleNameChange = (event) => {\n      setNewName(event.target.value)\n  }\n\n  const handleNumberChange = (event) => {\n      setNewNumber(event.target.value)\n  }\n\n  const nameExist = () => {\n    return(\n    persons.some(person => person.name === newName)\n    )\n  }\n\n  const handleFilterChange = (event) => {\n      setFilter(event.target.value)\n  }\n\n  const filterNames = (person) => {\n    return(\n      person.name.toLowerCase().includes(filter.toLowerCase())\n    )\n  }\n\n  const handleDelete = (person) => {\n    const personId = person.id\n    if (window.confirm(`Are you sure to delete ${person.name}`)){\n      personService\n            .deletePerson(personId)\n            .then(deleted => {\n              setPersons(persons.filter(person => person.id !== personId))\n              handleNotification(`${person.name} deleted from phonebook.`)\n            })\n    }\n  }\n\n\n  const update = (nameObject) => {\n    if(window.confirm(`${newName} is already added to phonebook. Do you want to change the number?`)){\n      const id = persons.find(person => person.name === newName).id\n      console.log(id)\n      personService\n        .update(id, nameObject)\n        .then(returnedPerson => {\n          setPersons(persons.map(person => person.id !== id ? person : returnedPerson))\n          handleNotification(`${newName}'s number changed`)\n        })\n        .catch(error => {\n          handleError(`${newName} was already removed from server`)\n          setPersons(persons.filter(person => person.id !== id))\n        })\n    }\n  }\n\n  const handleNotification = (message) => {\n    setNotificationMessage(`${message}`)\n    setIsError(false)\n      setTimeout(() => {\n      setNotificationMessage(null)\n    }, 5000)\n  }\n\n   const handleError = (message) => {\n    setNotificationMessage(`${message}`)\n    setIsError(true)\n      setTimeout(() => {\n      setNotificationMessage(null)\n    }, 5000)\n  }\n\n\n\n\n  return (\n    <div className='App'>\n      <h2>Phonebook</h2>\n      <Notification message={notificationMessage} isError={isError}/>\n      <FilterInput filter={filter} handleFilterChange={handleFilterChange}/>\n      <h3>Add new number</h3>\n      <PersonForm\n        newName={newName}\n        newNumber={newNumber}\n        addName={addName}\n        handleNameChange={handleNameChange}\n        handleNumberChange={handleNumberChange}\n      />\n      <h3>Numbers</h3>\n      <ul>\n        <Rows\n          persons={persons}\n          filterNames={filterNames}\n          handleDelete={handleDelete}/>\n      </ul>\n    </div>\n  )\n\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}